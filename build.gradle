import groovy.json.JsonSlurper

// See https://github.com/JetBrains/gradle-intellij-plugin/

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.18'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'org.jetbrains.intellij' version '0.4.21'
    id 'scala'
}

def versionFile = new File("./version")

group 'com.telesoftas.ijplugin.gitconfigcommittemplate'
version versionFile.text

repositories {
    mavenCentral()
}

intellij {
    version '2021.1' // native Support for Git commit templates
//    version '2020.1'
    plugins = ['git4idea']
}

patchPluginXml {
    changeNotes """
      <ul>
        <li>Info extraction from branch name into template using regex</li>
      </ul>
    """
    sinceBuild '201.0'
    untilBuild ''
}

dependencies {
    compile 'org.scala-lang:scala-library:2.13.8'
    compile 'org.scalactic:scalactic_2.13:3.2.12'

    testCompile 'org.scalatest:scalatest_2.13:3.2.12'
    testCompile 'org.mockito:mockito-scala_2.13:1.17.7'
}

task scalatests(dependsOn: ['testClasses'], type: JavaExec) {
    main = 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/scala/test', '-o']
    classpath = sourceSets.test.runtimeClasspath
}

def isNonStable = { String version ->
    def regex = /^[0-9,.v-]+(-r)?$/
    return !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

tasks.register('verifyDependencyVersions') {
    dependsOn tasks.dependencyUpdates
    doLast {
        def excludes = ["org.jetbrains.intellij.gradle.plugin"]
        def jsonFile = file('./build/dependencyUpdates/report.json')
        def report = new JsonSlurper().parseText(jsonFile.text)
        def updates = report.outdated.dependencies
                .findAll { !excludes.contains(it.name) }
                .collect { it.group + "." + it.name + "." + it.version + " -> " + it.available }
        if (updates.isEmpty()) println "Dependencies are up to date"
        else throw new GradleException("Dependencies need to be updated:\n" + updates.join('\n'))
    }
}

tasks.register('bump') {
    doLast {
        def lastUpdatedVersionFile = new File("./gradle/.lastUpdatedVersion")
        def userVersion = versionFile.text
        def version = userVersion.split("\\.")
        if (userVersion == lastUpdatedVersionFile.text) {
            version[2]= (version[2].toInteger() + 1).toString()
        } else {
            version[2]= 0
        }
        userVersion = version.join('.')
        versionFile.write userVersion
        lastUpdatedVersionFile.write userVersion
    }
}